import uuid
from prettytable import PrettyTable

#Write parsed data to file
def write_results_to_file(data, file_data):
	if data[0]['type'] == "PE":
		file_name = data[1]['md5']
		header = PrettyTable(['file name','type', 'magic', 'machine', 'time_stamp'])
		header.padding_width=1
		header.add_row([file_data, data[0]['type'], data[0]['magic'], data[0]['machine'], data[0]['time_stamp']])

		hashes = PrettyTable(['imphash', 'md5', 'sha-1', 'sha-256'])
		hashes.padding_width=1
		hashes.add_row([data[1]['imphash'], data[1]['md5'], data[1]['sha-1'], data[1]['sha-256']])

		sections = PrettyTable(['Section name'])
		for d in data[2].values():
			sections.add_row([d])

		imports = PrettyTable(['lib', 'import'])
		imports.padding_width=1
		for i in range(0, len(data[3])):
			for imp in data[3][i]['imports']:
				imports.add_row([data[3][i]['dll'], imp])

		symbols = PrettyTable(['lib', 'import'])
		for s in data[4]:
			symbols.add_row([s])
		with open('output/'+file_name+'.txt', 'w') as output_file:
			output_file.write(str(header))
			output_file.write(str(hashes))
			output_file.write(str(sections))
			output_file.write(str(imports))
			output_file.write(str(symbols))
		return None

	elif data[0]['type'] == "ELF":
		file_name = data[1]['md5']
		header = PrettyTable(['file name', 'type', 'machine'])
		header.padding_width = 1
		header.add_row([file_data, data[0]['type'], data[0]['machine']])

		hashes = PrettyTable(['telfhash', 'md5', 'sha-1', 'sha-256'])
		hashes.padding_width = 1
		hashes.add_row([data[1]['telfhash'], data[1]['md5'], data[1]['sha-1'], data[1]['sha-256']])

		segments = PrettyTable(['type', 'flags', 'sections'])
		segments.padding_width = 1
		for d in data[2]:
			segments.add_row([d['type'], d['flags'], d['sections']])

		libraries = PrettyTable(['library'])
		for d in data[3]['libraries']:
			libraries.add_row([d])

		sections = PrettyTable(['section', 'instruction'])
		sections.padding_width = 1
		for d in data[4]:
			for k in d.keys():
				sections.add_row([k, d[k][2]])

		symbols = PrettyTable(['name', 'type', 'import_export'])
		symbols.padding_width = 1
		for d in data[5]:
			symbols.add_row([d['name'], d['type'], d['import_export']])

		with open('output/'+file_name+'.txt', 'w') as output_file:
			output_file.write(str(header))
			output_file.write(str(hashes))
			output_file.write(str(segments))
			output_file.write(str(libraries))
			output_file.write(str(sections))
			output_file.write(str(symbols))


	elif data[0]['type'] == "MACH-O":
		file_name = data[1]['md5']
		header = PrettyTable(['file name', 'machine', 'filetype', 'subtype'])
		header.padding_width = 1
		header.add_row([file_data, data[0]['machine'], data[0]['filetype'], data[0]['subtype']])

		hashes = PrettyTable(['md5', 'sha-1', 'sha-256'])
		hashes.padding_width = 1
		hashes.add_row([data[1]['md5'], data[1]['sha-1'], data[1]['sha-256']])

		imports = PrettyTable(['function', 'library'])
		imports.padding_width = 1
		for d in data[2]['imports']:
			imports.add_row([d[0], d[1]])

		with open('output/'+file_name+'.txt', 'w') as output_file:
			output_file.write(str(header))
			output_file.write(str(hashes))
			output_file.write(str(imports))


	elif data[0]['type'] == "DEX":
		file_name = data[1]['md5']
		header = PrettyTable(['file name', 'type'])
		header.padding_width = 1
		header.add_row([file_data, data[0]['type']])

		hashes = PrettyTable(['md5', 'sha-1', 'sha-256'])
		hashes.padding_width = 1
		hashes.add_row([data[1]['md5'], data[1]['sha-1'], data[1]['sha-256']])

		classes = PrettyTable(['classes'])
		for d in data[2]['classes']:
			classes.add_row([d])

		methods = PrettyTable(['methods'])
		for d in data[3]['methods']:
			methods.add_row([d])

		with open('output/'+file_name+'.txt', 'w') as output_file:
			output_file.write(str(header))
			output_file.write(str(hashes))
			output_file.write(str(classes))
			output_file.write(str(methods))

	print(f"Information extracted from {file_data} completed")
	return None