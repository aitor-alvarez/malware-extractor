import lief
import zipfile
import tarfile
import io

lief.logging.disable()


class FileExtract:
	def __int__(self, file_data):
		self.file = file_data

	def get_info(self):
		try:
			if lief.is_pe(self.file):
				resources=[]
				hashes ={}
				headers={}
				sections={}
				tls={}
				symbols={}
				pe_file = lief.PE.parse(self.file)
				hashes['imphash'] = lief.PE.get_imphash(pe_file)
				hashes['sha256'] = pe_file.authentihash_sha256.hex()
				headers['magic'] = "PE32" if pe_file.optional_header.magic == lief.PE.PE_TYPE.PE32 else "PE64"
				headers['machine'] = str(pe_file.header.machine)
				headers['time_stamp'] = pe_file.header.time_date_stamps
				if pe_file.tls.callbacks:
					tls['tls_callbacks'] = [hex(callback) for callback in  pe_file.tls.callbacks]
				if pe_file.tls.section.name:
					tls['tls_section'] = pe_file.tls.section.name
				if pe_file.tls.directory.type:
					tls['tls_directory'] = pe_file.tls.directory.type

				if pe_file.sections.__len__()>0:
					i=1
					for section in pe_file.sections:
						key = 'section_name_'+str(i)
						section[key] = section.name
						i+=1

				if pe_file.has_imports:
					for entry in pe_file.imports:
						entries={'type': 'imports','dll': entry.name}
						imports=[]
						for impor in entry.entries:
							imports.append(impor.name)
						entries['imports'] = imports
						resources.append(entries)
				if len(pe_file.symbols)>0:
					for symbol in symbols:
						if symbol.section_number >0:
							symbols['symbol'] = symbol.section.name
				return headers, hashes, sections, resources, tls, symbols

			elif lief.is_elf(self.file):
				return "ELF"
			elif lief.is_macho(self.file):
				return "Mach-O"
			elif lief.is_dex(self.file):
				return "DEX"
			elif zipfile.is_zipfile(self.file):
				return "ZIP"
			elif tarfile.is_tarfile(self.file):
				return "TAR"

		except:
			return "Unknown format"



