import lief
from macholibre import parse
import telfhash
from simple_file_checksum import get_checksum

lief.logging.disable()

#Extract static data from binaries
class FileExtract:

	@staticmethod
	def get_info(file_data):
		try:
			if lief.is_pe(file_data):
				resources=[]
				hashes ={}
				headers={}
				sections={}
				symbols={}
				pe_file = lief.PE.parse(file_data)
				hashes['imphash'] = lief.PE.get_imphash(pe_file)
				hashes['md5'] = pe_file.authentihash_md5.hex()
				hashes['sha-1'] = pe_file.authentihash_sha1.hex()
				hashes['sha-256'] = pe_file.authentihash_sha256.hex()
				headers['type'] = "PE"
				headers['magic'] = "PE32" if pe_file.optional_header.magic == lief.PE.PE_TYPE.PE32 else "PE64"
				headers['machine'] = str(pe_file.header.machine)
				headers['time_stamp'] = pe_file.header.time_date_stamps

				if pe_file.sections.__len__()>0:
					i=1
					for section in pe_file.sections:
						key = 'section_name_'+str(i)
						sections[key] = section.name
						i+=1

				if pe_file.has_imports:
					for entry in pe_file.imports:
						entries={'type': 'imports','dll': entry.name}
						imports=[]
						for impor in entry.entries:
							imports.append(impor.name)
						entries['imports'] = imports
						resources.append(entries)
				if len(pe_file.symbols)>0:
					for symbol in symbols:
						if symbol.section_number >0:
							symbols['symbol'] = symbol.section.name
				return [headers, hashes, sections, resources, symbols]

			elif lief.is_elf(file_data):
				elf_file = lief.ELF.parse(file_data)
				header = elf_file.header
				headers = {}
				hashes= {}
				sections = {}
				segments_output={}
				libraries = {}
				symbols_output={}
				headers['machine'] = str(header.machine_type)
				headers['type'] = "ELF"
				hashes['md5'] = get_checksum(file_data, algorithm='MD5')
				hashes['sha-1'] = get_checksum(file_data, algoritm='SHA1')
				hashes['sha-256'] = get_checksum(file_data, algoritm='SHA256')
				hashes['telfhash'] = telfhash.telfhash(file_data)['telfhash']

				#Segments
				segments = elf_file.segments
				if len(segments) > 0:

					for segment in segments:
						sections = segment.sections
						scts = ", ".join([section.name for section in sections])
						flags_str = ["-"] * 3
						if lief.ELF.SEGMENT_FLAGS.R in segment:
							flags_str[0] = "r"

						if lief.ELF.SEGMENT_FLAGS.W in segment:
							flags_str[1] = "w"

						if lief.ELF.SEGMENT_FLAGS.X in segment:
							flags_str[2] = "x"
						flags_str = "".join(flags_str)

						segments_output['type'] = str(segment.type).split(".")[-1]
						segments_output['flags'] = flags_str
						segments_output['sections'] = scts

				#Libraries
				libraries['libraries'] = elf_file.libraries

				#Sections details
				for section in elf_file.sections:
					if section.name !='':
						sections[section.name] = [str(section.type).split(".")[-1], abs(section.entropy),
						                          " - ".join([str(s.type).split(".")[-1] for s in section.segments])]
				#Symbols
				symbols = elf_file.exported_symbols
				if len(symbols)>0:
					for symbol in symbols:
						import_export = ""
						if symbol.imported:
							import_export = "I"

						if symbol.exported:
							import_export = "E"

						symbols_output['name'] = symbol.name
						symbols_output['type'] = str(symbol.type).split(".")[-1]
						symbols_output['import_export'] = import_export

				return [headers, segments_output, libraries, sections, symbols_output]


			elif lief.is_macho(file_data):
				machO_file = parse(file_data)
				headers = {}
				hashes = {}
				imports = {}
				headers['machine'] = machO_file['macho']['cputype']
				headers['type'] = "MACH-O"
				headers['filetype'] = machO_file['macho']['filetype']
				headers['subtype'] = machO_file['macho']['subtype']
				hashes['md5'] = machO_file['hashes']['md5']
				hashes['sha-1'] = machO_file['hashes']['sha1']
				hashes['sha-256'] = machO_file['hashes']['sha256']
				imports['imports'] = machO_file['macho']['imports']
				return [headers, hashes, imports]

			elif lief.is_dex(file_data):
				dex = lief.DEX.parse(file_data)
				headers = {}
				hashes = {}
				classes = {}
				methods={}
				strings={}
				headers['type'] = "DEX"
				hashes['md5'] = dex['hashes']['md5']
				hashes['sha-1'] = dex['hashes']['sha1']
				hashes['sha-256'] = dex['hashes']['sha256']
				classes['classes'] = [c for c in dex.classes]
				methods['methods'] = [m for m in dex.methods]
				strings['strings'] = [s for s in dex.strings]
				return [headers, hashes, classes, methods, strings]

		except:
			print(f"The file {file_data} may be corrupted or contain errors")