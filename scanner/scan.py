import os
import yara

class MalwareScanner:
	def __int__(self, root_dir, yara_rules_file, file_to_scan=None, yara_directory=None):
		self.root_dir = root_dir
		self.yara_rules_file = yara_rules_file
		self.file_to_scan = file_to_scan
		self.directory = yara_directory


	def compile_yara_rules(self):
		assert os.path.isdir(self.directory)
		direct = os.listdir(self.directory)
		yara_dict = {}
		for yar in direct:
			try:
				# Try to compile individual rules for correctness
				test = yara.compile(filepath=self.directory + yar)
				yara_dict[yar] = self.directory + yar
			except yara.SyntaxError as e:
				print(e)
				continue
		rules = yara.compile(filepaths=yara_dict)
		rules.save('rules/yara_rules')
		return None


	# Scan from directory root down in search for compromised files
	def scan_directory_struct(self):
		assert os.path.isdir(self.root_dir)
		matches_list = []
		rules = yara.load(self.yara_rules_file)
		for root, dirs, files in os.walk(self.root_dir):
			for fil in files:
				matches = rules.match(os.path.join(root, dir, fil))
				if matches:
					matches_list.append({'file': os.path.join(root, dir, fil), 'matches': matches})
		return matches_list


	def scan_file(self):
		assert os.path.isfile(self.file_to_scan)
		assert os.path.isfile(self.yara_rules_file)
		rules = yara.load(self.yara_rules_file)
		matches = rules.match(self.file_to_scan)
		if matches:
			return {'file': self.file_to_scan, 'matches': matches}
		else:
			return None
