import os
import yara
from scanner.extract_info import FileExtract


class MalwareExtractor:
	def __int__(self, root_dir, yara_rules_file, file_to_scan=None):
		self.root_dir = root_dir
		self.yara_rules_file = yara_rules_file
		self.file_to_scan = file_to_scan
		assert os.path.isfile(self.yara_rules_file)
		self.rules = yara.load(self.yara_rules_file)


	@staticmethod
	def compile_yara_rules(yara_directory):
		if os.path.isdir(yara_directory):
			direct = os.listdir(yara_directory)
			yara_dict = {}
			for yar in direct:
				try:
					# Try to compile individual rules for correctness
					test = yara.compile(filepath=yara_directory + yar)
					yara_dict[yar] = yara_directory + yar
				except yara.SyntaxError as e:
					print(e)
					continue
			rules = yara.compile(filepaths=yara_dict)
			rules.save('rules/yara_rules')
			return None
		else:
			print("No compiled yara file was provided")

	# Scan from directory root down in search for compromised files
	def scan_directory_struct(self):
		assert os.path.isdir(self.root_dir)
		matches_list = []
		rules = yara.load(self.yara_rules_file)
		for root, dirs, files in os.walk(self.root_dir):
			for fil in files:
				matches = rules.match(os.path.join(root, dir, fil))
				if matches:
					matches_list.append({'file': os.path.join(root, dir, fil), 'matches': matches})
		return matches_list


	def scan_file(self):
		assert os.path.isfile(self.file_to_scan)
		matches = self.rules.match(self.file_to_scan)
		if matches:
			print(f"Compromised file found at {matches['file']}")
			return [{'file': self.file_to_scan, 'matches': matches}]
		else:
			return None


	@staticmethod
	def extract_info_from_files(matches):
		extracted=[]
		for match in matches:
			data = FileExtract.get_info(match['file'])
			extracted.append({'file': match['file'], 'data': data})


	@staticmethod
	def extract_info_from_file(match):
		data = FileExtract.get_info(match['file'])
		return data